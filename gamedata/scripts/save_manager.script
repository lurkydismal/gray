--[[
    Lua Marshal Save/Load Utility

    This script provides utility functions for saving and loading game state using the marshal library. It abstracts the serialization and deserialization processes, allowing easy persistence of game state across sessions.

    Dependencies:
    - Requires the 'marshal' library to be installed and available globally as 'marshal'.

    Functions:
    - saveToMarshalFile(stateTable): Serializes a given Lua table (stateTable) and saves it to a file. Useful for saving game states, configurations, or any other table-based data.

    - loadFromMarshalFile(filePath): Reads a serialized Lua table from a file, deserializes it, and returns the Lua table. Useful for loading saved game states, configurations, or any other table-based data previously saved.

    Usage:
    Ensure that the 'marshal' library is available and that 'isMarshal' is set to true if the library is loaded successfully. These functions can be called from anywhere in your Lua project to save or load game states or other table-based data.
    
    Example:
    -- Saving a game state
    local gameState = {
        score = 1000,
        level = 5,
        player = {
            name = "Player",
            items = {"x", "y", "z"}
        }
    }
    saveToMarshalFile(gameState)

    -- Loading a game state
    local loadedGameState = loadFromMarshalFile()
    print(loadedGameState.level) -- Output: 5

    Note:
    - These functions use binary mode for file operations to ensure the integrity of serialized data across different platforms.

    Author:
    - IX-Ray Team
--]]

local SAVES_FILE_PATH = "$game_saves$"
local INFO_TO_SAVE = ""
local INFO_TO_LOAD = ""

-- Ensure the given directory directory exists
function ensureDirExists(path)
    if not isLfs then
        error("LFS library is not available.")
        return
    end
    
    local attr = lfs.attributes(path)
    if attr == nil then -- Path does not exist
        local success, err = lfs.mkdir(path)
        if not success then
            error("Failed to create directory: " .. err)
        end
    elseif attr.mode ~= "directory" then -- Path exists but is not a directory
        error("Path exists but is not a directory: " .. path)
    end
end

function BeforeSaveEvent(fName)
    if not isMarshal then
        error("Marshal library is not available.")
        return
    end
    
    -- Resolve the full path using the game's FS API
    local saveDir = getFS():update_path(SAVES_FILE_PATH, "")
    -- Ensure the directory exists
    ensureDirExists(saveDir)
    
    INFO_TO_SAVE = fName .. ".dat"
    SendScriptCallback("save_state")
end 

function BeforeLoadEvent(fName)
    if not isMarshal then
        error("Marshal library is not available.")
        return
    end
    
    INFO_TO_LOAD = fName .. ".dat"
    SendScriptCallback("load_state")
end 

function deleteObsoleteData(purgedName)
    if not purgedName or purgedName == "" then
        print("No purgedName provided for deletion.")
        return
    end

    -- Append the ".dat" extension to the purged name to form the filename
    local filename = purgedName .. ".dat"

    -- Resolve the full path using the game's FS API
    local fullPath = getFS():update_path(SAVES_FILE_PATH, filename)
    if not fullPath or fullPath == "" then
        print("Failed to resolve path for deletion: " .. SAVES_FILE_PATH .. "/" .. filename)
        return
    end

    -- Attempt to delete the file
    local success, reason = os.remove(fullPath)
    if success then
        print("Successfully deleted: " .. fullPath)
    else
        print("Failed to delete file: " .. fullPath .. ". Reason: " .. tostring(reason))
    end
end

function saveToMarshalFile(stateTable)
    if not isMarshal then
        error("Marshal library is not available.")
        return
    end

    -- Serialize the state table
    local serializedState = marshal.encode(stateTable)

    -- Resolve the full path using the game's FS API
    local fullPath = getFS():update_path(SAVES_FILE_PATH, INFO_TO_SAVE)
    printf("Attempting to save to %s" , fullPath)
    if fullPath then
        -- Write the serialized state using Lua's io library
        local file, err = io.open(fullPath, "wb")
        if file then
            file:write(serializedState)
            file:close()
        else
            error("Failed to open file for saving with Lua io: " .. (err or "unknown error"))
        end
    else
        error("Failed to resolve path for saving: " .. SAVES_FILE_PATH .. "/" .. INFO_TO_SAVE)
    end
end

function loadFromMarshalFile()
    if not isMarshal then
        error("Marshal library is not available.")
        return nil
    end

    -- Resolve the full path using the game's FS API
    local fullPath = getFS():update_path(SAVES_FILE_PATH, INFO_TO_LOAD)
    printf("Attempting to load from %s" , fullPath)
    local file, err = io.open(fullPath, "rb")
    if not file then
        error("Failed to open file for loading with Lua io: " .. (err or "unknown error"))
        return nil
    end

    local serializedState = file:read("*a") -- Read the entire file content
    file:close()

    -- Deserialize the state back into a Lua table
    local stateTable = marshal.decode(serializedState)
    return stateTable
end